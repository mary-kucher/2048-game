{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/Game.js","src/scripts/Matrix.js","src/scripts/Tile.js"],"sourcesContent":["/* eslint-disable */ class $21198e7cd5cea76d$export$2e2bcd8739ae039 {\n    setNewPosition(rowIndex, cellIndex) {\n        this.position = {\n            row: rowIndex,\n            cell: cellIndex,\n            indexArr: rowIndex * 4 + cellIndex\n        };\n    }\n    merge(tile) {\n        this.value += tile.value;\n        tile.setNewPosition(this.position.row, this.position.cell);\n        this.tileHTML.style.zIndex = \"2\";\n        tile.tileHTML.style.zIndex = \"1\";\n        tile.render();\n        setTimeout(()=>tile.tileHTML.remove(), 300);\n    }\n    render() {\n        const allTd = document.querySelectorAll(\".field-cell\");\n        this.tileHTML.textContent = `${this.value}`;\n        this.tileHTML.className = `tile tile--${this.value}`;\n        // eslint-disable-next-line no-shadow\n        const { top: top, left: left } = allTd[this.position.indexArr].getBoundingClientRect();\n        this.tileHTML.style.top = `${top}px`;\n        this.tileHTML.style.left = `${left}px`;\n    }\n    addTileToView() {\n        const containerTile = document.querySelector(\".tile-container\");\n        containerTile.append(this.tileHTML);\n    }\n    constructor(x, y){\n        this.value = Math.random() < 0.9 ? 2 : 4;\n        this.tileHTML = document.createElement(\"div\");\n        this.position = {\n            row: x,\n            cell: y,\n            indexArr: x * 4 + y\n        };\n    }\n}\n\n\nclass $09cee3a8b585b4cc$export$2e2bcd8739ae039 {\n    coordsEmptyTiles() {\n        return this.matrix.map((row, x)=>row.map((cell, y)=>{\n                if (cell == null) return {\n                    x: x,\n                    y: y\n                };\n            })).flat().filter((el)=>el);\n    }\n    addTile() {\n        const freeTiles = this.coordsEmptyTiles();\n        let randomNumber = Math.floor(Math.random() * freeTiles.length);\n        let { x: x, y: y } = freeTiles[randomNumber];\n        this.matrix[x][y] = new (0, $21198e7cd5cea76d$export$2e2bcd8739ae039)(x, y);\n        this.matrix[x][y].addTileToView();\n    }\n    updated() {\n        for(let i = 0; i < this.matrix.length; i++){\n            for(let j = 0; j < this.matrix.length; j++)if (this.matrix[i][j]) {\n                this.matrix[i][j].setNewPosition(i, j);\n                this.matrix[i][j].render();\n            }\n        }\n    }\n    clear() {\n        this.matrix.flat().filter((el)=>el).forEach((tile)=>{\n            tile.tileHTML.remove();\n        });\n    }\n    moveLeft() {\n        this.cleanMoveMerge();\n        this.shift(false);\n    }\n    moveRight() {\n        this.cleanMoveMerge();\n        this.shift();\n    }\n    moveUp() {\n        this.cleanMoveMerge();\n        this.shiftUpDown(false);\n    }\n    moveDown() {\n        this.cleanMoveMerge();\n        this.shiftUpDown();\n    }\n    swapTiles(x1, y1, x2, y2) {\n        let current = this.matrix[x1][y1];\n        this.matrix[x1][y1] = this.matrix[x2][y2];\n        this.matrix[x2][y2] = current;\n        this.wasMove = true;\n    }\n    shift(moveRight = true) {\n        for(let i = 0; i < this.matrix.length; i++){\n            let current = moveRight ? this.matrix.length - 1 : 0;\n            let next = moveRight ? current - 1 : 1;\n            let increment = moveRight ? -1 : 1;\n            while(next < this.matrix.length && next >= 0)if (!this.matrix[i][next]) next += increment;\n            else {\n                if (!this.matrix[i][current]) {\n                    this.swapTiles(i, current, i, next);\n                    next += increment;\n                } else if (this.matrix[i][current].value === this.matrix[i][next].value) {\n                    this.matrix[i][current].setNewPosition(i, current);\n                    this.mergeTiles(i, next, i, current);\n                    current += increment;\n                    next += increment;\n                } else {\n                    current += increment;\n                    if (current === next) next += increment;\n                }\n            }\n        }\n    }\n    shiftUpDown(moveDown = true) {\n        for(let i = 0; i < this.matrix.length; i++){\n            let current = moveDown ? this.matrix.length - 1 : 0;\n            let next = moveDown ? current - 1 : 1;\n            let increment = moveDown ? -1 : 1;\n            while(next < this.matrix.length && next >= 0)if (!this.matrix[next][i]) next += increment;\n            else {\n                if (!this.matrix[current][i]) {\n                    this.swapTiles(current, i, next, i);\n                    next += increment;\n                } else if (this.matrix[current][i].value === this.matrix[next][i].value) {\n                    this.matrix[current][i].setNewPosition(current, i);\n                    this.mergeTiles(next, i, current, i);\n                    current += increment;\n                    next += increment;\n                } else {\n                    current += increment;\n                    if (current === next) next += increment;\n                }\n            }\n        }\n    }\n    mergeTiles(x1, y1, x2, y2) {\n        this.wasMerge = true;\n        let value = this.matrix[x1][y1].value;\n        this.mergedTilesSum += value * 2;\n        this.matrix[x2][y2].merge(this.matrix[x1][y1]);\n        this.matrix[x1][y1] = null;\n        if (this.matrix[x2][y2].value === this.maxTileValue) this.win = true;\n    }\n    cleanMoveMerge() {\n        this.wasMove = false;\n        this.wasMerge = false;\n    }\n    isMergePossible() {\n        return this.matrix.flat().some((tile, i, arr)=>{\n            let value = tile.value;\n            if ((i + 1) % 4 !== 0 && value === arr[i + 1].value) return true;\n            else if (i + 4 <= arr.length - 1 && value === arr[i + 4].value) return true;\n            else return false;\n        });\n    }\n    constructor(){\n        this.matrix = [\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        this.wasMove = false;\n        this.maxTileValue = 2048;\n        this.wasMerge = false;\n        this.mergedTilesSum = 0;\n        this.win = false;\n        this.addTile();\n        this.addTile();\n        this.updated();\n    }\n}\n\n\nclass $bb96f5e77e258175$export$2e2bcd8739ae039 {\n    handleTouchStart(ev) {\n        ev.preventDefault();\n        const firstTouch = ev.touches[0];\n        this.x1 = firstTouch.clientX;\n        this.y1 = firstTouch.clientY;\n    }\n    handleTouchEnd(ev) {\n        ev.preventDefault();\n        if (!this.x1 || !this.y1) return false;\n        const x2 = ev.touches[0].clientX;\n        const y2 = ev.touches[0].clientY;\n        const diffX = x2 - this.x1;\n        const diffY = y2 - this.y1;\n        if (Math.abs(diffX) > Math.abs(diffY)) {\n            if (diffX > 0) this.table.moveRight();\n            else this.table.moveLeft();\n        } else if (diffY > 0) this.table.moveDown();\n        else this.table.moveUp();\n        this.x1 = null;\n        this.y1 = null;\n        this.allChecks();\n    }\n    handleArrowsButtonPressing(ev) {\n        if (!this.arrows.includes(ev.key)) return;\n        ev.preventDefault();\n        switch(ev.key){\n            case \"ArrowLeft\":\n                this.table.moveLeft();\n                break;\n            case \"ArrowUp\":\n                this.table.moveUp();\n                break;\n            case \"ArrowRight\":\n                this.table.moveRight();\n                break;\n            case \"ArrowDown\":\n                this.table.moveDown();\n                break;\n        }\n        this.allChecks();\n    }\n    allChecks() {\n        if (this.table.wasMove || this.table.wasMerge) this.table.addTile();\n        this.table.updated();\n        if (this.table.wasMerge) {\n            this.score += this.table.mergedTilesSum;\n            this.table.mergedTilesSum = 0;\n        }\n        this.addScore.textContent = this.score;\n        if (this.table.coordsEmptyTiles().length < 1 && !this.table.isMergePossible()) setTimeout(()=>this.endGame.classList.remove(\"hidden\"), 1000);\n        else if (this.table.win) this.winGame.classList.remove(\"hidden\");\n    }\n    stop() {\n        document.removeEventListener(\"keydown\", this.listenerArrows);\n        this.gameField.removeEventListener(\"touchstart\", this.touchStartListener);\n        this.gameField.removeEventListener(\"touchmove\", this.touchEndListener);\n        this.table.clear();\n        this.endGame.classList.add(\"hidden\");\n        this.winGame.classList.add(\"hidden\");\n        this.score = 0;\n        this.addScore.textContent = \"0\";\n    }\n    constructor(){\n        this.score = 0;\n        this.table = new (0, $09cee3a8b585b4cc$export$2e2bcd8739ae039)();\n        this.listenerArrows = this.handleArrowsButtonPressing.bind(this);\n        this.touchStartListener = this.handleTouchStart.bind(this);\n        this.touchEndListener = this.handleTouchEnd.bind(this);\n        this.gameField = document.querySelector(\".game-field\");\n        this.endGame = document.querySelector(\".message-lose\");\n        this.addScore = document.querySelector(\".game-score\");\n        this.winGame = document.querySelector(\".message-win\");\n        this.arrows = [\n            \"ArrowLeft\",\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\"\n        ];\n        document.addEventListener(\"keydown\", this.listenerArrows);\n        this.x1 = null;\n        this.y1 = null;\n        this.gameField.addEventListener(\"touchstart\", this.touchStartListener);\n        this.gameField.addEventListener(\"touchmove\", this.touchEndListener);\n    }\n}\n\n\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\nlet $09e991522ca7e64e$var$game;\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (ev)=>{\n    const startMess = document.querySelector(\".message-start\");\n    if ($09e991522ca7e64e$var$game) $09e991522ca7e64e$var$game.stop();\n    startMess.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$game = new (0, $bb96f5e77e258175$export$2e2bcd8739ae039)();\n    $09e991522ca7e64e$var$button.classList.remove(\"start\");\n    $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n});\n\n\n//# sourceMappingURL=index.4df6a2d2.js.map\n","import Game from './Game';\n\nconst button = document.querySelector('button');\nlet game;\n\nbutton.addEventListener('click', (ev) => {\n  const startMess = document.querySelector('.message-start');\n\n  if (game) {\n    game.stop();\n  }\n  startMess.classList.add('hidden');\n  game = new Game();\n  button.classList.remove('start');\n  button.classList.add('restart');\n  button.textContent = 'Restart';\n});\n","import Matrix from './Matrix';\n\nexport default class Game {\n  constructor() {\n    this.score = 0;\n    this.table = new Matrix();\n    this.listenerArrows = this.handleArrowsButtonPressing.bind(this);\n    this.touchStartListener = this.handleTouchStart.bind(this);\n    this.touchEndListener = this.handleTouchEnd.bind(this);\n    this.gameField = document.querySelector('.game-field');\n    this.endGame = document.querySelector('.message-lose');\n    this.addScore = document.querySelector('.game-score');\n    this.winGame = document.querySelector('.message-win');\n    this.arrows = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'];\n    document.addEventListener('keydown', this.listenerArrows);\n    this.x1 = null;\n    this.y1 = null;\n    this.gameField.addEventListener('touchstart', this.touchStartListener);\n    this.gameField.addEventListener('touchmove', this.touchEndListener);\n  }\n  handleTouchStart(ev) {\n    ev.preventDefault();\n\n    const firstTouch = ev.touches[0];\n\n    this.x1 = firstTouch.clientX;\n    this.y1 = firstTouch.clientY;\n  }\n  handleTouchEnd(ev) {\n    ev.preventDefault();\n\n    if (!this.x1 || !this.y1) {\n      return false;\n    }\n\n    const x2 = ev.touches[0].clientX;\n    const y2 = ev.touches[0].clientY;\n    const diffX = x2 - this.x1;\n    const diffY = y2 - this.y1;\n\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n      if (diffX > 0) {\n        this.table.moveRight();\n      } else {\n        this.table.moveLeft();\n      }\n    } else {\n      if (diffY > 0) {\n        this.table.moveDown();\n      } else {\n        this.table.moveUp();\n      }\n    }\n    this.x1 = null;\n    this.y1 = null;\n    this.allChecks();\n  }\n\n  handleArrowsButtonPressing(ev) {\n    if (!this.arrows.includes(ev.key)) {\n      return;\n    }\n    ev.preventDefault();\n\n    switch (ev.key) {\n      case 'ArrowLeft':\n        this.table.moveLeft();\n        break;\n      case 'ArrowUp':\n        this.table.moveUp();\n        break;\n      case 'ArrowRight':\n        this.table.moveRight();\n        break;\n      case 'ArrowDown':\n        this.table.moveDown();\n        break;\n    }\n    this.allChecks();\n  }\n\n  allChecks() {\n    if (this.table.wasMove || this.table.wasMerge) {\n      this.table.addTile();\n    }\n    this.table.updated();\n\n    if (this.table.wasMerge) {\n      this.score += this.table.mergedTilesSum;\n      this.table.mergedTilesSum = 0;\n    }\n\n    this.addScore.textContent = this.score;\n\n    if (this.table.coordsEmptyTiles().length < 1\n      && !this.table.isMergePossible()) {\n      setTimeout(() => this.endGame.classList.remove('hidden'), 1000);\n    } else if (this.table.win) {\n      this.winGame.classList.remove('hidden');\n    }\n  }\n\n  stop() {\n    document.removeEventListener('keydown', this.listenerArrows);\n    this.gameField.removeEventListener('touchstart', this.touchStartListener);\n    this.gameField.removeEventListener('touchmove', this.touchEndListener);\n    this.table.clear();\n    this.endGame.classList.add('hidden');\n    this.winGame.classList.add('hidden');\n    this.score = 0;\n    this.addScore.textContent = '0';\n  }\n}\n","/* eslint-disable */\nimport Tile from './Tile';\n\nexport default class Matrix {\n  constructor() {\n    this.matrix = [\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n      [null, null, null, null],\n    ];\n    this.wasMove = false;\n    this.maxTileValue = 2048;\n    this.wasMerge = false;\n    this.mergedTilesSum = 0;\n    this.win = false;\n    this.addTile();\n    this.addTile();\n    this.updated();\n  }\n\n  coordsEmptyTiles() {\n    return this.matrix.map((row,x) =>\n      row.map((cell, y) => {\n        if (cell == null) {\n          return {x: x, y: y}\n        }\n      })\n    ).flat().filter(el => el)\n  }\n\n  addTile() {\n    const freeTiles = this.coordsEmptyTiles();\n    let randomNumber = Math.floor(Math.random() * freeTiles.length)\n    let { x, y } = freeTiles[randomNumber];\n    this.matrix[x][y] = new Tile(x, y);\n    this.matrix[x][y].addTileToView();\n  }\n\n  updated() {\n    for (let i = 0; i < this.matrix.length; i++) {\n      for (let j = 0; j < this.matrix.length; j++) {\n        if (this.matrix[i][j]) {\n          this.matrix[i][j].setNewPosition(i, j);\n          this.matrix[i][j].render();\n        }\n      }\n    }\n  }\n\n  clear() {\n    this.matrix.flat().filter(el => el).forEach(tile => {\n      tile.tileHTML.remove();\n    })\n  }\n\n  moveLeft() {\n    this.cleanMoveMerge();\n    this.shift(false);\n  }\n\n  moveRight() {\n    this.cleanMoveMerge();\n    this.shift();\n  }\n\n  moveUp() {\n    this.cleanMoveMerge();\n    this.shiftUpDown(false);\n  }\n\n  moveDown() {\n    this.cleanMoveMerge();\n    this.shiftUpDown();\n  }\n\n  swapTiles(x1, y1, x2, y2) {\n    let current = this.matrix[x1][y1];\n    this.matrix[x1][y1] = this.matrix[x2][y2];\n    this.matrix[x2][y2] = current;\n    this.wasMove = true;\n  }\n\n  shift(moveRight = true) {\n    for (let i = 0; i < this.matrix.length; i++) {\n      let current = moveRight ? this.matrix.length - 1 : 0;\n      let next = moveRight ? current - 1 : 1;\n      let increment = moveRight ? -1 : 1;\n      while (next < this.matrix.length && next >= 0) {\n        if (!this.matrix[i][next]) {\n          next += increment;\n        } else {\n          if (!this.matrix[i][current]) {\n            this.swapTiles(i, current, i, next)\n            next += increment;\n          } else if (this.matrix[i][current].value === this.matrix[i][next].value) {\n            this.matrix[i][current].setNewPosition(i, current);\n            this.mergeTiles(i, next, i, current);\n            current += increment;\n            next += increment;\n          } else {\n            current += increment;\n            if (current === next) {\n              next += increment;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  shiftUpDown(moveDown = true) {\n    for (let i = 0; i < this.matrix.length; i++) {\n      let current = moveDown ? this.matrix.length - 1 : 0;\n      let next = moveDown ? current - 1 : 1;\n      let increment = moveDown ? -1 : 1;\n      while (next < this.matrix.length && next >= 0) {\n        if (!this.matrix[next][i]) {\n          next += increment;\n        } else {\n          if (!this.matrix[current][i]) {\n            this.swapTiles(current, i, next, i)\n            next += increment;\n          } else if (this.matrix[current][i].value === this.matrix[next][i].value) {\n            this.matrix[current][i].setNewPosition(current, i);\n            this.mergeTiles(next, i, current, i);\n            current += increment;\n            next += increment;\n          } else {\n            current += increment;\n            if (current === next) {\n              next += increment;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  mergeTiles(x1, y1, x2, y2) {\n    this.wasMerge = true;\n    let value = this.matrix[x1][y1].value;\n    this.mergedTilesSum += value * 2;\n    this.matrix[x2][y2].merge(this.matrix[x1][y1]);\n    this.matrix[x1][y1] = null;\n    if (this.matrix[x2][y2].value === this.maxTileValue) {\n      this.win = true;\n    }\n  }\n\n  cleanMoveMerge() {\n    this.wasMove = false;\n    this.wasMerge = false;\n  }\n\n  isMergePossible() {\n    return this.matrix.flat().some((tile, i, arr) => {\n      let value = tile.value;\n      if (((i + 1) % 4 !== 0) && value === arr[i + 1].value) {\n        return true;\n      } else if (i + 4 <= arr.length - 1 && value === arr[i + 4].value) {\n        return true;\n      } else {\n        return false;\n      }\n    })\n  }\n}\n","export default class Tile {\n  constructor(x, y) {\n    this.value = Math.random() < 0.9 ? 2 : 4;\n    this.tileHTML = document.createElement('div');\n\n    this.position = {\n      row: x,\n      cell: y,\n      indexArr: x * 4 + y,\n    };\n  }\n\n  setNewPosition(rowIndex, cellIndex) {\n    this.position = {\n      row: rowIndex,\n      cell: cellIndex,\n      indexArr: rowIndex * 4 + cellIndex,\n    };\n  };\n\n  merge(tile) {\n    this.value += tile.value;\n    tile.setNewPosition(this.position.row, this.position.cell);\n    this.tileHTML.style.zIndex = '2';\n    tile.tileHTML.style.zIndex = '1';\n    tile.render();\n    setTimeout(() => tile.tileHTML.remove(), 300);\n  }\n\n  render() {\n    const allTd = document.querySelectorAll('.field-cell');\n\n    this.tileHTML.textContent = `${this.value}`;\n    this.tileHTML.className = `tile tile--${this.value}`;\n\n    // eslint-disable-next-line no-shadow\n    const { top, left } = allTd[this.position.indexArr]\n      .getBoundingClientRect();\n\n    this.tileHTML.style.top = `${top}px`;\n    this.tileHTML.style.left = `${left}px`;\n  }\n\n  addTileToView() {\n    const containerTile = document.querySelector('.tile-container');\n\n    containerTile.append(this.tileHTML);\n  }\n}\n"],"names":["$09e991522ca7e64e$var$game","$21198e7cd5cea76d$export$2e2bcd8739ae039","setNewPosition","rowIndex","cellIndex","position","row","cell","indexArr","merge","tile","value","tileHTML","style","zIndex","render","setTimeout","remove","allTd","document","querySelectorAll","textContent","className","top","left","getBoundingClientRect","addTileToView","containerTile","querySelector","append","constructor","x","y","Math","random","createElement","$09cee3a8b585b4cc$export$2e2bcd8739ae039","coordsEmptyTiles","matrix","map","flat","filter","el","addTile","freeTiles","randomNumber","floor","length","updated","i","j","clear","forEach","moveLeft","cleanMoveMerge","shift","moveRight","moveUp","shiftUpDown","moveDown","swapTiles","x1","y1","x2","y2","current","wasMove","next","increment","mergeTiles","wasMerge","mergedTilesSum","maxTileValue","win","isMergePossible","some","arr","$bb96f5e77e258175$export$2e2bcd8739ae039","handleTouchStart","ev","preventDefault","firstTouch","touches","clientX","clientY","handleTouchEnd","diffX","diffY","abs","table","allChecks","handleArrowsButtonPressing","arrows","includes","key","score","addScore","endGame","classList","winGame","stop","removeEventListener","listenerArrows","gameField","touchStartListener","touchEndListener","add","bind","addEventListener","$09e991522ca7e64e$var$button","startMess"],"version":3,"file":"index.4df6a2d2.js.map"}